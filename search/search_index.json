{
    "docs": [
        {
            "location": "/",
            "text": "zend-expressive-swoole\n\n\n\n\n\n\nThis library provides the support of \nSwoole\n into\nan \nExpressive\n application. This means you can\nexecute your Expressive application using Swoole directly from the command line.\n\n\nInstallation\n\n\nRun the following to install this library:\n\n\n$ composer require zendframework/zend-expressive-swoole\n\n\n\nConfiguration\n\n\nAfter installing zend-expressive-swoole, you will need to first enable the\ncomponent, and then optionally configure it.\n\n\nWe recommend adding a new configuration file to your autoload directory,\n\nconfig/autoload/swoole.local.php\n. To begin with, use the following contents:\n\n\n<?php\n\nuse Zend\\Expressive\\Swoole\\ConfigProvider;\n\nreturn array_merge((new ConfigProvider())(), []);\n\n\n\nThe above will setup the Swoole integration for your application.\n\n\nBy default, Swoole executes the HTTP server with host \n127.0.0.1\n on port\n\n8080\n. You can change these values via configuration. Assuming you have the\nabove, modify it to read as follows:\n\n\n<?php\n\nuse Zend\\Expressive\\Swoole\\ConfigProvider;\n\nreturn array_merge((new ConfigProvider())(), [\n    'zend-expressive-swoole' => [\n        'swoole-http-server' => [\n            'host' => 'insert hostname to use here',\n            'port' => 80, // use an integer value here\n        ],\n    ],\n]);\n\n\n\n\n\nExpressive skeleton 3.1.0 and later\n\n\nIf you have built your application on the 3.1.0 or later version of the\nExpressive skeleton, you do not need to instantiate and invoke the package's\n\nConfigProvider\n, as the skeleton supports it out of the box.\n\n\nYou will only need to provide any additional configuration of the HTTP server.\n\n\n\n\nExecute\n\n\nOnce you have performed the configuration steps as outlined above, you can run\nan Expressive application with Swoole using the following command:\n\n\nphp public/index.php\n\n\n\nDocumentation\n\n\nBrowse the documentation online at https://docs.zendframework.com/zend-expressive-swoole/\n\n\nSupport\n\n\n\n\nIssues\n\n\nChat\n\n\nForum",
            "title": "zend-expressive-swoole"
        },
        {
            "location": "/#zend-expressive-swoole",
            "text": "This library provides the support of  Swoole  into\nan  Expressive  application. This means you can\nexecute your Expressive application using Swoole directly from the command line.",
            "title": "zend-expressive-swoole"
        },
        {
            "location": "/#installation",
            "text": "Run the following to install this library:  $ composer require zendframework/zend-expressive-swoole",
            "title": "Installation"
        },
        {
            "location": "/#configuration",
            "text": "After installing zend-expressive-swoole, you will need to first enable the\ncomponent, and then optionally configure it.  We recommend adding a new configuration file to your autoload directory, config/autoload/swoole.local.php . To begin with, use the following contents:  <?php\n\nuse Zend\\Expressive\\Swoole\\ConfigProvider;\n\nreturn array_merge((new ConfigProvider())(), []);  The above will setup the Swoole integration for your application.  By default, Swoole executes the HTTP server with host  127.0.0.1  on port 8080 . You can change these values via configuration. Assuming you have the\nabove, modify it to read as follows:  <?php\n\nuse Zend\\Expressive\\Swoole\\ConfigProvider;\n\nreturn array_merge((new ConfigProvider())(), [\n    'zend-expressive-swoole' => [\n        'swoole-http-server' => [\n            'host' => 'insert hostname to use here',\n            'port' => 80, // use an integer value here\n        ],\n    ],\n]);",
            "title": "Configuration"
        },
        {
            "location": "/#expressive-skeleton-310-and-later",
            "text": "If you have built your application on the 3.1.0 or later version of the\nExpressive skeleton, you do not need to instantiate and invoke the package's ConfigProvider , as the skeleton supports it out of the box.  You will only need to provide any additional configuration of the HTTP server.",
            "title": "Expressive skeleton 3.1.0 and later"
        },
        {
            "location": "/#execute",
            "text": "Once you have performed the configuration steps as outlined above, you can run\nan Expressive application with Swoole using the following command:  php public/index.php",
            "title": "Execute"
        },
        {
            "location": "/#documentation",
            "text": "Browse the documentation online at https://docs.zendframework.com/zend-expressive-swoole/",
            "title": "Documentation"
        },
        {
            "location": "/#support",
            "text": "Issues  Chat  Forum",
            "title": "Support"
        },
        {
            "location": "/intro/",
            "text": "Swoole\n\n\nSwoole\n is a PECL extension for developing\nasynchronous applications in PHP. It enables PHP developers to write\nhigh-performance, scalable, concurrent TCP, UDP, Unix socket, HTTP, or Websocket\nservices without requiring in-depth knowledge about non-blocking I/O programming\nor the low-level Linux kernel.\n\n\nInstall swoole\n\n\nYou can install the Swoole extension on Linux or Mac environments using the\nfollowing commands:\n\n\n$ pecl install swoole\n\n\n\nFor more information on the extension, \nvisit its package details on PECL\n.\n\n\nInstall zend-expressive-swoole\n\n\nTo install this package, use \nComposer\n:\n\n\n$ composer require zendframework/zend-expressive-swoole\n\n\n\nSwoole with Expressive\n\n\nzend-expressive-swoole enables an Expressive application to be executed with\nthe \nSwoole\n extension. This means you can run the\napplication from the command line, \nwithout requiring a web server\n.\n\n\nYou can run the application using the following command:\n\n\n$ php public/index.php\n\n\n\nThis command will execute Swoole on \nlocalhost\n via port \n8080\n.\n\n\n\n\nExpressive skeleton versions prior to 3.1.0\n\n\nThe above will work immediately after installing zend-expressive-swoole if you\nare using a version of \nzend-expressive-skeleton\n\nfrom 3.1.0 or later.\n\n\nFor applications based on previous versions of the skeleton, you will need to\ncreate a configuration file such as \nconfig/autoload/zend-expressive-swoole.global.php\n\nor \nconfig/autoload/zend-expressive-swoole.local.php\n with the following\ncontents:\n\n\n<?php\nuse Zend\\Expressive\\Swoole\\ConfigProvider;\n\nreturn (new ConfigProvider())();\n\n\n\n\n\nYou can change the host address and/or host name as well as the port using a\nconfiguration file, as follows:\n\n\n// In config/autoload/swoole.local.php:\nreturn [\n    'zend-expressive-swoole' => [\n        'swoole-http-server' => [\n            'host' => '192.168.0.1',\n            'port' => 9501,\n        ],\n    ],\n];\n\n\n\nProviding additional Swoole configuration\n\n\nYou can also configure the Swoole HTTP server using an \noptions\n key to specify\nany accepted Swoole settings. For instance, the following configuration\ndemonstrates enabling SSL:\n\n\n// config/autoload/swoole.local.php\nreturn [\n    'zend-expressive-swoole' => [\n        'swoole-http-server' => [\n            'host' => '192.168.0.1',\n            'port' => 9501,\n            'mode' => SWOOLE_BASE,\n            'protocol' => SWOOLE_SOCK_TCP | SWOOLE_SSL,\n            'options' => [\n                'ssl_cert_file' => 'path/to/ssl.crt',\n                'ssl_key_file' => 'path/to/ssl.key',\n            ],\n        ],\n    ],\n];\n\n\n\nServing static files\n\n\nWe also support serving static files. By default, we only serve files with\nextensions in the whitelist defined in the constant\n\nZend\\Expressive\\Swoole\\RequestHandlerSwooleRunner::DEFAULT_STATIC_EXTS\n, which\nis derived from a \nlist of common web MIME types maintained by Mozilla\n.\nYou can set the \ndocument root\n and the allowed extension types for static file\nresources using the following configuration settings:\n\n\n// config/autoload/swoole.local.php\nuse Zend\\Expressive\\Swoole\\RequestHandlerSwooleRunner;\n\nreturn [\n    'zend-expressive-swoole' => [\n        'swoole-http-server' => [\n            'host' => '192.168.0.1',\n            'port' => 9501,\n            'static_files' => array_merge(\n                RequestHandlerSwooleRunner::DEFAULT_STATIC_EXTS,\n                [ 'foo' => 'text/foo' ]\n            ),\n            'options' => [\n                'document_root' => 'path/to/document/root',\n            ],\n        ],\n    ],\n];\n\n\n\nIn the above example, we added support for the file extension \n.foo\n.\n\n\n\n\nSecurity warning\n\n\nNever add \nphp\n as an allowed static file extension, as doing so could expose the source\ncode of your PHP application!\n\n\nDocument root\n\n\nIf no \ndocument_root\n configuration is present, the default is to use\n\ngetcwd() . '/public'\n. If either the configured or default document root\ndoes not exist, we raise an exception.",
            "title": "Introduction"
        },
        {
            "location": "/intro/#swoole",
            "text": "Swoole  is a PECL extension for developing\nasynchronous applications in PHP. It enables PHP developers to write\nhigh-performance, scalable, concurrent TCP, UDP, Unix socket, HTTP, or Websocket\nservices without requiring in-depth knowledge about non-blocking I/O programming\nor the low-level Linux kernel.",
            "title": "Swoole"
        },
        {
            "location": "/intro/#install-swoole",
            "text": "You can install the Swoole extension on Linux or Mac environments using the\nfollowing commands:  $ pecl install swoole  For more information on the extension,  visit its package details on PECL .",
            "title": "Install swoole"
        },
        {
            "location": "/intro/#install-zend-expressive-swoole",
            "text": "To install this package, use  Composer :  $ composer require zendframework/zend-expressive-swoole",
            "title": "Install zend-expressive-swoole"
        },
        {
            "location": "/intro/#swoole-with-expressive",
            "text": "zend-expressive-swoole enables an Expressive application to be executed with\nthe  Swoole  extension. This means you can run the\napplication from the command line,  without requiring a web server .  You can run the application using the following command:  $ php public/index.php  This command will execute Swoole on  localhost  via port  8080 .",
            "title": "Swoole with Expressive"
        },
        {
            "location": "/intro/#expressive-skeleton-versions-prior-to-310",
            "text": "The above will work immediately after installing zend-expressive-swoole if you\nare using a version of  zend-expressive-skeleton \nfrom 3.1.0 or later.  For applications based on previous versions of the skeleton, you will need to\ncreate a configuration file such as  config/autoload/zend-expressive-swoole.global.php \nor  config/autoload/zend-expressive-swoole.local.php  with the following\ncontents:  <?php\nuse Zend\\Expressive\\Swoole\\ConfigProvider;\n\nreturn (new ConfigProvider())();   You can change the host address and/or host name as well as the port using a\nconfiguration file, as follows:  // In config/autoload/swoole.local.php:\nreturn [\n    'zend-expressive-swoole' => [\n        'swoole-http-server' => [\n            'host' => '192.168.0.1',\n            'port' => 9501,\n        ],\n    ],\n];",
            "title": "Expressive skeleton versions prior to 3.1.0"
        },
        {
            "location": "/intro/#providing-additional-swoole-configuration",
            "text": "You can also configure the Swoole HTTP server using an  options  key to specify\nany accepted Swoole settings. For instance, the following configuration\ndemonstrates enabling SSL:  // config/autoload/swoole.local.php\nreturn [\n    'zend-expressive-swoole' => [\n        'swoole-http-server' => [\n            'host' => '192.168.0.1',\n            'port' => 9501,\n            'mode' => SWOOLE_BASE,\n            'protocol' => SWOOLE_SOCK_TCP | SWOOLE_SSL,\n            'options' => [\n                'ssl_cert_file' => 'path/to/ssl.crt',\n                'ssl_key_file' => 'path/to/ssl.key',\n            ],\n        ],\n    ],\n];",
            "title": "Providing additional Swoole configuration"
        },
        {
            "location": "/intro/#serving-static-files",
            "text": "We also support serving static files. By default, we only serve files with\nextensions in the whitelist defined in the constant Zend\\Expressive\\Swoole\\RequestHandlerSwooleRunner::DEFAULT_STATIC_EXTS , which\nis derived from a  list of common web MIME types maintained by Mozilla .\nYou can set the  document root  and the allowed extension types for static file\nresources using the following configuration settings:  // config/autoload/swoole.local.php\nuse Zend\\Expressive\\Swoole\\RequestHandlerSwooleRunner;\n\nreturn [\n    'zend-expressive-swoole' => [\n        'swoole-http-server' => [\n            'host' => '192.168.0.1',\n            'port' => 9501,\n            'static_files' => array_merge(\n                RequestHandlerSwooleRunner::DEFAULT_STATIC_EXTS,\n                [ 'foo' => 'text/foo' ]\n            ),\n            'options' => [\n                'document_root' => 'path/to/document/root',\n            ],\n        ],\n    ],\n];  In the above example, we added support for the file extension  .foo .",
            "title": "Serving static files"
        },
        {
            "location": "/intro/#security-warning",
            "text": "Never add  php  as an allowed static file extension, as doing so could expose the source\ncode of your PHP application!",
            "title": "Security warning"
        },
        {
            "location": "/intro/#document-root",
            "text": "If no  document_root  configuration is present, the default is to use getcwd() . '/public' . If either the configured or default document root\ndoes not exist, we raise an exception.",
            "title": "Document root"
        },
        {
            "location": "/logging/",
            "text": "Logging\n\n\nWeb servers typically log request details, so that you can perform tasks such as\nanalytics, identification of invalid requests, and more.\n\n\nOut-of-the-box, Swoole does not do this. As such, we provide these capabilities\nwith this integration.\n\n\nWe log two items:\n\n\n\n\nWhen the web server starts, indicating the host and port on which it is running.\n\n\nEach request, with the following details:\n\n\nTimestamp of the request\n\n\nRemote address of the client making the request\n\n\nRequest method\n\n\nRequest URI\n\n\n\n\nBy default, logging is performed to STDOUT, using an internal logger. However,\nyou can use any [PSR-3 compliant logger][https://www.php-fig.org/psr/psr-3/] to\nlog application details. All logs we emit use \nPsr\\Log\\LogLevel::INFO\n.\n\n\nTo substitute your own logger, you have two options.\n\n\nIf you are manually instantiating a \nZend\\Expressive\\Swoole\\RequestHandlerSwooleRunner\n\ninstance, you may provide it as the sixth argument to the constructor:\n\n\nuse Zend\\Expressive\\Swoole\\RequestHandlerSwooleRunner;\n\n$runner = new RequestHandlerSwooleRunner(\n    $application,\n    $serverRequestFactory,\n    $serverRequestErrorResponseGenerator,\n    $swooleHttpServer,\n    $config,\n    $logger // <-- PSR-3 logger instance\n);\n\n\n\nIf using the provided factory (\nRequestHandlerSwooleRunnerFactory\n) & which\nis the default when using the functionality with Expressive & you can\nprovide the logger via the \nPsr\\Log\\LoggerInterface\n service.",
            "title": "Logging"
        },
        {
            "location": "/logging/#logging",
            "text": "Web servers typically log request details, so that you can perform tasks such as\nanalytics, identification of invalid requests, and more.  Out-of-the-box, Swoole does not do this. As such, we provide these capabilities\nwith this integration.  We log two items:   When the web server starts, indicating the host and port on which it is running.  Each request, with the following details:  Timestamp of the request  Remote address of the client making the request  Request method  Request URI   By default, logging is performed to STDOUT, using an internal logger. However,\nyou can use any [PSR-3 compliant logger][https://www.php-fig.org/psr/psr-3/] to\nlog application details. All logs we emit use  Psr\\Log\\LogLevel::INFO .  To substitute your own logger, you have two options.  If you are manually instantiating a  Zend\\Expressive\\Swoole\\RequestHandlerSwooleRunner \ninstance, you may provide it as the sixth argument to the constructor:  use Zend\\Expressive\\Swoole\\RequestHandlerSwooleRunner;\n\n$runner = new RequestHandlerSwooleRunner(\n    $application,\n    $serverRequestFactory,\n    $serverRequestErrorResponseGenerator,\n    $swooleHttpServer,\n    $config,\n    $logger // <-- PSR-3 logger instance\n);  If using the provided factory ( RequestHandlerSwooleRunnerFactory ) & which\nis the default when using the functionality with Expressive & you can\nprovide the logger via the  Psr\\Log\\LoggerInterface  service.",
            "title": "Logging"
        },
        {
            "location": "/how_it_works/",
            "text": "How it works\n\n\nWhen you run an Expressive application using Swoole, you will execute PHP from\nthe command line interface, \nwithout using a web server\n.\n\n\nThis sounds a bit strange in PHP, though it will be familiar to \nNode.js\n\ndevelopers; the execution model under Swoole is similar to that technology.\n\n\nThe HTTP server of Swoole is a PHP class that offers callbacks on a number of events,\nusing the \non(string $name, callable $action)\n method.\n\n\nThe request handler implemented in zend-expressive-swoole is a runner that\nenables the execution of an Expressive application inside the \non('request')\n\nevent of \nSwoole\\Http\\Server\n. This runner is implemented in the\n\nZend\\Expressive\\Swoole\\RequestHandlerSwooleRunner\n class.\n\n\nThe basic implementation looks similar to the following:\n\n\npublic function run() : void\n{\n    $this->swooleHttpServer->on('start', function ($server) {\n        printf(\"Swoole is running at %s:%s\\n\", $server->host, $server->port);\n    });\n\n    $this->swooleHttpServer->on('request', function ($request, $response) {\n        printf(\n            \"%s - %s - %s %s\\n\",\n            date('Y-m-d H:i:sO', time()),\n            $request->server['remote_addr'],\n            $request->server['request_method'],\n            $request->server['request_uri']\n        );\n        $emitter = new SwooleEmitter($response);\n        try {\n            $psr7Request = ($this->serverRequestFactory)($request);\n        } catch (Throwable $e) {\n            // Error in generating the request\n            $this->emitMarshalServerRequestException($emitter, $e);\n            return;\n        }\n        $emitter->emit($this->handler->handle($psr7Request));\n    });\n\n    $this->swooleHttpServer->start();\n}\n\n\n\nThis package provides a bridge between \nSwoole\\Http\\Request\n (\n$request\n) and\n\nPSR-7\n requests (\n$psr7Request\n;\nspecifically as implemented by \nzend-diactoros\n)\nvia the class \nZend\\Expressive\\Swoole\\ServerRequestSwooleFactory\n.\n\n\nIt also provides a Swoole-specific emitter, \nZend\\Expressive\\Swoole\\SwooleEmitter\n,\nthat converts a PSR-7 response to a \nSwoole\\Http\\Response\n instance.\n\n\nWhen you run an Expressive application using zend-expressive-swoole, you will\nnotice a bunch of PHP processes running. By default, Swoole executes 4 \nworker\n\nprocesses, 1 \nmanager\n process and 1 \nmaster\n process, for a total of 6 PHP\nprocesses.\n\n\n\n\nThe advantages of this architecture are many: it's very light and simple (just\nPHP processes running); it offers a service layer that is able to restart a\nworker automatically if it's not responding; and it allows executing multiple\nHTTP requests in parallel. The architecture is built for scaling.\n\n\nPerformance\n\n\nThe ZF developers performed a benchmark running the default \nzend-expressive-skeleton\n\napplication with Swoole 4.0.1, nginx 1.12.1, and Apache 2.4.27 (with mod_php)\nusing PHP 7.2.7.\n\n\nThe results demonstrated that \nExpressive with Swoole runs 4 to 5 times faster\nthan nginx or Apache\n.\n\n\nThis impressive result is primarily due to the shared memory approach of Swoole.\nUnlike traditional apache/php-fpm usage, the memory allocated in Swoole will not\nbe freed after a request. This allows application configuration and artifacts\n(such as middleware and handlers) to persist between requests and processes.",
            "title": "How it works"
        },
        {
            "location": "/how_it_works/#how-it-works",
            "text": "When you run an Expressive application using Swoole, you will execute PHP from\nthe command line interface,  without using a web server .  This sounds a bit strange in PHP, though it will be familiar to  Node.js \ndevelopers; the execution model under Swoole is similar to that technology.  The HTTP server of Swoole is a PHP class that offers callbacks on a number of events,\nusing the  on(string $name, callable $action)  method.  The request handler implemented in zend-expressive-swoole is a runner that\nenables the execution of an Expressive application inside the  on('request') \nevent of  Swoole\\Http\\Server . This runner is implemented in the Zend\\Expressive\\Swoole\\RequestHandlerSwooleRunner  class.  The basic implementation looks similar to the following:  public function run() : void\n{\n    $this->swooleHttpServer->on('start', function ($server) {\n        printf(\"Swoole is running at %s:%s\\n\", $server->host, $server->port);\n    });\n\n    $this->swooleHttpServer->on('request', function ($request, $response) {\n        printf(\n            \"%s - %s - %s %s\\n\",\n            date('Y-m-d H:i:sO', time()),\n            $request->server['remote_addr'],\n            $request->server['request_method'],\n            $request->server['request_uri']\n        );\n        $emitter = new SwooleEmitter($response);\n        try {\n            $psr7Request = ($this->serverRequestFactory)($request);\n        } catch (Throwable $e) {\n            // Error in generating the request\n            $this->emitMarshalServerRequestException($emitter, $e);\n            return;\n        }\n        $emitter->emit($this->handler->handle($psr7Request));\n    });\n\n    $this->swooleHttpServer->start();\n}  This package provides a bridge between  Swoole\\Http\\Request  ( $request ) and PSR-7  requests ( $psr7Request ;\nspecifically as implemented by  zend-diactoros )\nvia the class  Zend\\Expressive\\Swoole\\ServerRequestSwooleFactory .  It also provides a Swoole-specific emitter,  Zend\\Expressive\\Swoole\\SwooleEmitter ,\nthat converts a PSR-7 response to a  Swoole\\Http\\Response  instance.  When you run an Expressive application using zend-expressive-swoole, you will\nnotice a bunch of PHP processes running. By default, Swoole executes 4  worker \nprocesses, 1  manager  process and 1  master  process, for a total of 6 PHP\nprocesses.   The advantages of this architecture are many: it's very light and simple (just\nPHP processes running); it offers a service layer that is able to restart a\nworker automatically if it's not responding; and it allows executing multiple\nHTTP requests in parallel. The architecture is built for scaling.",
            "title": "How it works"
        },
        {
            "location": "/how_it_works/#performance",
            "text": "The ZF developers performed a benchmark running the default  zend-expressive-skeleton \napplication with Swoole 4.0.1, nginx 1.12.1, and Apache 2.4.27 (with mod_php)\nusing PHP 7.2.7.  The results demonstrated that  Expressive with Swoole runs 4 to 5 times faster\nthan nginx or Apache .  This impressive result is primarily due to the shared memory approach of Swoole.\nUnlike traditional apache/php-fpm usage, the memory allocated in Swoole will not\nbe freed after a request. This allows application configuration and artifacts\n(such as middleware and handlers) to persist between requests and processes.",
            "title": "Performance"
        }
    ]
}